# -*- coding: utf-8 -*-
"""
Created on Fri Jan 28 16:37:31 2022

@author: ClaudiaLorusso
"""
import sys
from os import path


#PYTHON 3.9 needed!!! (current packages versions are NOT compatible with Python 3.10)

# ---------------------------- UTILS -------------------------------------
def __get_path__(relative_path):
    """
    Converts the relative path into an absolute path
    :param relative_path: relative path of the file
    :return:
        absolute path: base path + relative path
    """
    try:
        # NOTE:
        # PyInstaller creates a temp folder and stores path in _MEIPASS
        # It's a runtime computation. don't worry about the inline warning.
        base_path = sys._MEIPASS
    except Exception:
        base_path = path.abspath(".")
    return path.join(base_path, relative_path)

# ---------------------------- MAIN -------------------------------------
if __name__ == '__main__':
    """
    it checks if all of the required packages are installed:
        yes:    imports packages and runs the program
        no:     asks the user if he wants to install all of the packages
                contained in the requirements.txt file:
                    yes:    installs and imports all of the packages and
                            runs the program
                    no:     closes the program
    
    the program will ask to insert the path of the file containing the law
    (.pdf, .txt, .docx ONLY).
    
    By default, it computes the similarity between the law and all of the targets.
    
    BUT if you want to compute the similarity between the law and all of the SDGs
    (SDG = goal + list of targets) you must opportunely switch, on the Preprocessing class,
    the get_lemma_targets_laws_df path_targets argument to
    path_targets="LEMMAS\\lemma_sdgs.xlsx" (no need to change the compute_vocabulary input);
    you also need to change (Compute_Similarity class) the values passed to the matrix to
    [:17,1:] and [17:,1:]. You can simply find them under the two TODO tags.
        
    The similarity is calculated with the computation of the TFIDF between each target and the law;
    the cossim similarity is then applied. The first three more relevant targets are, then, returned.
    Each keyphrase, used for the computation of the vocabulary and also for the TFIDF, is composed
    of 1 token (unigram). You can change this feature by simply change the ngram parameter, passed
    to the get_relevant function (Compute_similarity class), to whatever integer you want.
    The bigram vocabulary (keyphrases composed of 1 or two tokens) is already available in the
    VOCAB folder with name of: vocabulary.xlsx . Same thing goes for the unigram vocabulary,
    available in the VOCAB\\ngram folder named vocabulary_1.xlsx .
    The vocabulary, if not already in the folder, will authomatically be generated by the program
    under the name of VOCAB\\ngram\\vocabulary_#number_of_the_gram.xlsx
    
    SUGGESTION: don't go over the bigram. 
    """
    try:
        from Compute_Similarity import get_relevant
        from FileHandler import ask_path
        #asks laws path
        dest = __get_path__(ask_path())
        #gets first three relevant targets
        print(get_relevant(path_law=dest, ngram = 1))

    except ModuleNotFoundError:
        print("Since it is the first execution of the program you need to install the following libraries in order to correctly run Puglia Sostenibile:\n")
        with open("requirements.txt", 'r') as f:
            lines = f.readlines()
            print(lines)
            f.close()
        choice = input("\nDo you want to proceed with the installation? Type 'Y' to proceed or type any other key to close the process:\t").lower()
        if choice == 'y':
            from subprocess import run
            # implement pip as a subprocess:
            # I start with scikit-learn 'cause of dependencies
            run(["pip3", "install", "scikit-learn == 1.0.2"], shell=True, capture_output=True)
            run(["pip3", "install", "-r", "requirements.txt"], shell=True, capture_output=True)

            print("\nPackages correctly installed!\n")
            from Compute_Similarity import get_relevant
            from FileHandler import ask_path
            # asks laws path
            dest = __get_path__(ask_path())
            # gets first three relevant targets
            try:
                print(get_relevant(path_law=dest, ngram=1, sim_target = False))
                input("\npress any key to exit.")
            except ValueError:
                print(
                    "WARNING: Il file selezionato potrebbe essere protetto da password.\nPer favore, seleziona un altro file.")
            except OSError:
                print("Warning: Il file risulta essere vuoto.\nPer favore, seleziona un altro file.")
            except IOError:
                print("Warning: Impossibile processare il file per uno dei seguenti motivi:"
                      "\n-\til file è vuoto;"
                      "\n-\til file contiene solo immagini;"
                      "\n-\til file è corrotto."
                      "\n\nPer favore, seleziona un altro file.")
        else:
            print("\nBye! ", "\U0001F984")
            input("\npress any key to exit.")
    except ValueError:
        print("WARNING: Il file selezionato potrebbe essere protetto da password.\nPer favore, seleziona un altro file.")
    except OSError:
        print("Warning: Il file risulta essere vuoto.\nPer favore, seleziona un altro file.")
    except IOError:
        print("Warning: Impossibile processare il file per uno dei seguenti motivi:"
                                          "\n-\til file è vuoto;"
                                          "\n-\til file contiene solo immagini;"
                                          "\n-\til file è corrotto."
                                          "\n\nPer favore, seleziona un altro file.")

